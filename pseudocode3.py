# -*- coding: utf-8 -*-
"""Pseudocode3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ak9waa8GUkmroROQShGYxaVTFyNbAxAl
"""

import numpy as np
from scipy.sparse import csr_matrix
def grad_psi_a_sparse(x):
  n = len(x)
  if np.all(x >= 0):
    if 0 < x[0] < 1:
      V_a = csr_matrix((np.array([x[0]]), (np.array([0]), np.array([0]))), shape=(n, 1))
    else:
        V_a = csr_matrix((np.array([1.0]), (np.array([0]), np.array([0]))), shape=(n, 1))
    return V_a
  else:
    return csr_matrix((n, 1))

#Example
x_example = np.array([0.5, 0.4, 0.3])
gradient_sparse = grad_psi_a_sparse(x_example)
print("Sparse Gradient:\n", gradient_sparse)

"""Input range is **within** (0,1).
All elements are positive
"""

#Example
x_example = np.array([1.5, 0.1, 0.3])
gradient_sparse = grad_psi_a_sparse(x_example)
print("Sparse Gradient:\n", gradient_sparse)

"""Input range is **outside** (0,1).
All elements are positive.
"""

#Example
x_example = np.array([-0.2, 0.1, 0.3])
gradient_sparse = grad_psi_a_sparse(x_example)
print("Sparse Gradient:\n", gradient_sparse)

"""Input has **negative** elements."""

import unittest
import numpy as np
from scipy.sparse import csr_matrix

def grad_psi_a_sparse(x):
  n = len(x)
  if np.all(x >= 0):
    if 0 < x[0] < 1:
      return csr_matrix((np.array([x[0]]), (np.array([0]), np.array([0]))), shape=(n, 1))
    else:
      return csr_matrix((np.array([1.0]), (np.array([0]), np.array([0]))), shape=(n, 1))
  return csr_matrix((n, 1))

class TestGradPsiASparse(unittest.TestCase):

    def test_gradient_non_negative_within_range(self):
        x = np.array([0.5, 0.2, 0.3])
        result = grad_psi_a_sparse(x)
        self.assertAlmostEqual(result[0, 0], 0.5)

    def test_gradient_non_negative_outside_range(self):
        x = np.array([1.5, 0.2, 0.3])
        result = grad_psi_a_sparse(x)
        self.assertEqual(result[0, 0], 1.0)

    def test_gradient_negative_element(self):
        x = np.array([-0.1, 0.2, 0.3])
        result = grad_psi_a_sparse(x)
        self.assertEqual(result.nnz, 0)


def run_tests():
    suite = unittest.TestLoader().loadTestsFromTestCase(TestGradPsiASparse)
    unittest.TextTestRunner().run(suite)

run_tests()

